const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function fixDraftProducts() {
  try {
    console.log('üîÑ Fixing draft beverage products...')

    // Find products that should be draft beverages (contain "—Ä–æ–∑–ª–∏–≤" or have unit "L")
    const draftProducts = await prisma.product.findMany({
      where: {
        OR: [
          { name: { contains: '—Ä–æ–∑–ª–∏–≤' } },
          { description: { contains: '—Ä–æ–∑–ª–∏–≤' } },
          { name: { contains: '–ü–∏–≤–æ' } },
          { name: { contains: '–ø–∏–≤–æ' } },
          { name: { contains: '–°–∏–¥—Ä' } },
          { name: { contains: '—Å–∏–¥—Ä' } },
          { name: { contains: '–í–∏–Ω–æ' } },
          { name: { contains: '–≤–∏–Ω–æ' } },
          { name: { contains: '–ö–≤–∞—Å' } },
          { name: { contains: '–∫–≤–∞—Å' } }
        ]
      },
      include: {
        inventory: true
      }
    })

    console.log(`Found ${draftProducts.length} potential draft products`)

    let updatedCount = 0

    for (const product of draftProducts) {
      // Check if it's a draft beverage (has L unit in inventory or contains draft keywords)
      const isDraft = product.inventory.some(inv => inv.unit === 'L') ||
                     product.name.includes('—Ä–æ–∑–ª–∏–≤') ||
                     product.description?.includes('—Ä–æ–∑–ª–∏–≤')

      if (isDraft && !product.requires_bottles) {
        await prisma.product.update({
          where: { id: product.id },
          data: { requires_bottles: true }
        })

        console.log(`‚úÖ Updated product: ${product.display_name} - now requires bottles`)
        updatedCount++
      }
    }

    console.log(`\nüéâ Updated ${updatedCount} draft products to require bottle selection!`)

    // Also check for any products with "per L" pricing that should be draft
    const perLiterProducts = await prisma.product.findMany({
      where: {
        OR: [
          { description: { contains: 'per L' } },
          { description: { contains: '–∑–∞ –ª—ñ—Ç—Ä' } },
          { description: { contains: '–∑–∞ –ª' } }
        ]
      }
    })

    for (const product of perLiterProducts) {
      if (!product.requires_bottles) {
        await prisma.product.update({
          where: { id: product.id },
          data: { requires_bottles: true }
        })

        console.log(`‚úÖ Updated per-liter product: ${product.display_name} - now requires bottles`)
        updatedCount++
      }
    }

    console.log(`\nüç∫ Total products updated: ${updatedCount}`)
    console.log('üéØ Bottle selection should now work for all draft beverages!')

  } catch (error) {
    console.error('‚ùå Failed to fix draft products:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixDraftProducts()
